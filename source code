# import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
from plotly.offline  import download_plotlyjs,init_notebook_mode,plot, iplot
import cufflinks as cf
init_notebook_mode(connected = True)
cf.go_offline()
%matplotlib inline

from plotly import tools
import plotly.plotly as py
from plotly.offline import init_notebook_mode, iplot
init_notebook_mode(connected=True)
import plotly.graph_objs as go
import plotly.figure_factory as ff
import plotly.offline as offline
# Squarify for treemaps
import squarify
# Random for well, random stuff
import random
# operator for sorting dictionaries
import operator
# For ignoring warnings
import warnings
warnings.filterwarnings('ignore')



df = pd.read_csv("Your file path")
df.head(2)

df = pd.read_csv("Your file path")
df.tail(2)

temp = df["Winner"].value_counts()
fig = {
  "data": [
    {
      "values": temp.values,
      "labels": temp.index,
      "domain": {"x": [0, 1]},
      "hole": .6,
      "type": "pie"
    },
    
    ],
  "layout": {
        "title":"Winner",
        "annotations": [
            {
                "font": {
                    "size": 17
                },
                "showarrow": False,
                "text": "Whos winning?",
                "x": 0.5,
                "y": 0.5
            }
            
        ]
    }
}
iplot(fig, filename='donut')

fig, ax = plt.subplots(1,2, figsize=(15, 5))
sns.distplot(df.B_age, ax=ax[0])
sns.distplot(df.R_age, ax=ax[1])

BAge = df.groupby(['B_age']).count()['Winner']
BlueAge = BAge.sort_values(axis=0, ascending=False)
blue = BlueAge.head(10)
BlueAge.head(10)

RAge = df.groupby(['R_age']).count()['Winner']
RedAge = RAge.sort_values(axis=0, ascending=False)
RedAge = RedAge.head(10)

BAge = df.groupby(['B_age']).count()['Winner']
BlueAge = BAge.sort_values(axis=0, ascending=False)
BlueAge = BlueAge.head(10)

RAge = df.groupby(['R_age']).count()['Winner']
RedAge = RAge.sort_values(axis=0, ascending=False)
RedAge.head(10)

figR = {
  "data": [
    {
      "values": RedAge.values,
      "labels": RedAge.index,
      "domain": {"x": [0, 1]},
      "hole": .6,
      "type": "pie"
    },
    
    ],
  "layout": {
        #"title":"Challenger",
        "annotations": [
            {
                "font": {
                    "size": 17
                },
                "showarrow": False,
                "text": "Challengers Age",
                "x": 0.5,
                "y": 0.5
            }
            
        ]
    }
}

figB = {
  "data": [
    {
      "values": BlueAge.values,
      "labels": BlueAge.index,
      "domain": {"x": [0, 1]},
      "hole": .6,
      "type": "pie"
    },
    
    ],
  "layout": {
        "title":"Champion",
        "annotations": [
            {
                "font": {
                    "size": 17
                },
                "showarrow": False,
                "text": "Champions Age",
                "x": 0.5,
                "y": 0.5
            }
            
        ]
    }
}
iplot(figR, filename='donut')
iplot(figB, filename='donut')

df['Age_Difference'] = df.B_age - df.R_age
df[['Age_Difference', 'Winner']].groupby('Winner').mean()

fig, ax = plt.subplots(1,2, figsize=(15, 5))
sns.distplot(df.R_Height_cms, bins = 20, ax=ax[0]) #Blue 
sns.distplot(df.B_Height_cms, bins = 20, ax=ax[1]) #Red

fig, ax = plt.subplots(figsize=(14, 6))
sns.kdeplot(df.B_Height_cms, shade=True, color='indianred', label='Red')
sns.kdeplot(df.R_Height_cms, shade=True, label='Blue')

df['Height_Difference'] = df.B_Height_cms - df.R_Height_cms
df[['Height_Difference', 'Winner']].groupby('Winner').mean()

win = pd.read_csv("F:/Sem II/Data Visyalization and Story telling/UFC/UFCdatavisualization.csv")

temp = win["winby"].value_counts()
fig = {
  "data": [
    {
      "values": temp.values,
      "labels": temp.index,
      "domain": {"x": [0, 1]},
      #"name": "Types of Loans",
      #"hoverinfo":"label+percent+name",
      "hole": .6,
      "type": "pie"
    },
    
    ],
  "layout": {
        "title":"How the fighter's are winning?",
        "annotations": [
            {
                "font": {
                    "size": 20
                },
                "showarrow": False,
                "text": "Win by",
                "x": 0.50,
                "y": 0.5
            }
            
        ]
    }
}
iplot(fig, filename='donut')

g = sns.FacetGrid(win, col='winby')
g.map(plt.hist, 'R_Age', bins=50)

g = sns.FacetGrid(win, col='winby')
g.map(plt.hist, 'R_Age', bins=20)

g = sns.FacetGrid(win, col='winby')
g.map(plt.hist, 'B_Age', bins=20)

g = sns.FacetGrid(df, col='weight_class')
g.map(plt.hist, 'R_age', bins=5)

sns.lmplot(x="B_avg_BODY_att", 
               y="B_avg_BODY_landed", 
               col="Winner", hue="Winner", data=df, col_wrap=2, size=6)
			   
cnt_srs = df['R_Location'].value_counts().head(15)

trace = go.Bar(
    x=cnt_srs.index,
    y=cnt_srs.values,
    marker=dict(
        color=cnt_srs.values,
    ),
)

layout = go.Layout(
    title='Most Popular cities for Red fighters'
)

data = [trace]
fig = go.Figure(data=data, layout=layout)
offline.iplot(fig, filename="Ratio")


r1 = df[['B_Weight_lbs', 'B_avg_BODY_landed', 'B_avg_CLINCH_landed', 'B_avg_GROUND_landed']].groupby('B_Weight_lbs').sum()

r1.plot(kind='line', figsize=(10,10))
plt.show()

inputs = pd.read_csv("F:/Sem II/Data Visyalization and Story telling/UFC/UFCdatavisualization.csv")


r5 = inputs[['B_Weight', 'B__Round1_Grappling_Reversals_Landed', 'B__Round1_Grappling_Standups_Landed', 'B__Round1_Grappling_Takedowns_Landed']].groupby('B_Weight').sum()

r5.plot(kind='line', figsize=(14,6))
plt.show()


r5 = inputs[['B_Weight', 'B__Round5_Grappling_Reversals_Landed', 'B__Round5_Grappling_Standups_Landed', 'B__Round5_Grappling_Takedowns_Landed']].groupby('B_Weight').sum()

r5.plot(kind='line', figsize=(14,6))
plt.show()

clin_r1 = inputs[['B_Weight', 'B__Round1_Strikes_Clinch Head Strikes_Landed', 'B__Round1_Strikes_Clinch Leg Strikes_Landed', 'B__Round1_Strikes_Clinch Body Strikes_Landed']].groupby('B_Weight').sum()

clin_r1.plot(kind='line', figsize=(14,6))
plt.show()

clin_r5= inputs[['B_Weight', 'B__Round1_Strikes_Clinch Head Strikes_Landed', 'B__Round1_Strikes_Clinch Leg Strikes_Landed', 'B__Round5_Strikes_Clinch Leg Strikes_Landed', 'B__Round5_Strikes_Clinch Head Strikes_Landed']].groupby('B_Weight').sum()

clin_r5.plot(kind='line', figsize=(14,6))
plt.show()

clin= inputs[['B_Weight', 'B__Round1_Strikes_Clinch Head Strikes_Landed', 'B__Round2_Strikes_Clinch Head Strikes_Landed', 'B__Round3_Strikes_Clinch Head Strikes_Landed', 'B__Round4_Strikes_Clinch Head Strikes_Landed', 'B__Round5_Strikes_Clinch Head Strikes_Landed']].groupby('B_Weight').sum()

clin.plot(kind='line', figsize=(14,6))
plt.show()

